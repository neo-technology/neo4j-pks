version: 2
jobs:
  build:
    docker:
      - image: debian:stretch

    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Tooling pre-requisites
          command: |
            # Secure software install
            apt-get update && apt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common
            
            # Google Cloud stuff
            export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
            echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
            
            # Docker stuff
            curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
            add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"

            EXTRA_NEEDED_TOOLS="wget make gettext-base jq"
            DOCKER="docker-ce docker-ce-cli containerd.io"

            apt-get update && apt-get install -y \
               google-cloud-sdk \
               $DOCKER \
               $EXTRA_NEEDED_TOOLS

      - run:
          name: PKS Environment Setup / Auth to Pivotal Test Environment
          command: |
             bin/pks-linux login -a $PKS_ENDPOINT -u $PKS_USERNAME -p $PKS_PASSWORD -k
             bin/pks-linux get-credentials neo4j

      - run:
          name: Kubectl Setup
          command: |
             curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
             chmod +x kubectl
             ./kubectl config use-context neo4j                    

      - run:
          name: Install Helm
          command: |
             curl -LO https://storage.googleapis.com/kubernetes-helm/helm-v2.13.1-linux-amd64.tar.gz
             tar zxvf helm-v2.13.1-linux-amd64.tar.gz
             mv linux-amd64/helm .
             ./helm version
             ./helm init --client-only

      - run: 
          name: Setup GCP Tooling for Container Registry
          command: |
            echo $GCLOUD_SERVICE_KEY > service-key.json
            gcloud auth activate-service-account \
                neo4j-pks-build@neo4j-pivotal.iam.gserviceaccount.com \
                --key-file=service-key.json
            gcloud auth configure-docker

      - run:
          name: Build 
          command: |
             # Add cwd to path to pick up the helm binary we installed.
             export PATH=.:$PATH
             BUILD=-$CIRCLE_BRANCH-$CIRCLE_SHA1
             mkdir -p target && echo $BUILD | tee -a target/BUILD.txt
             make BUILD=$BUILD build | tee -a target/BUILD.txt

      - run:
          name: Install 
          command: |
             # Add cwd to path to pick up the helm binary we installed.
             export PATH=.:$PATH
             BUILD=-$CIRCLE_BRANCH-$CIRCLE_SHA1
             make BUILD=$BUILD NAMESPACE=build-$CIRCLE_BUILD_NUM install | tee -a target/INSTALL.txt

      # We run packaging after it's installed into the cluster, because it
      # needs some startup time anyway.
      - run:
          name: Package 
          command: |
             # Add cwd to path to pick up the helm binary we installed.
             export PATH=.:$PATH
             BUILD=-$CIRCLE_BRANCH-$CIRCLE_SHA1
             mkdir -p target && echo $BUILD | tee -a target/PACKAGE.txt
             make BUILD=$BUILD package | tee -a target/PACKAGE.txt

      - run:
          name: Wait for PKS deployment to succeed and become ready
          command: |
             ./kubectl rollout status StatefulSet/testrun-neo4j-core --watch

      - run:
          name: Test
          command: |
            export PATH=.:$PATH
            IMAGE=$(cat .build/neo4j/tester/image)
            NAMESPACE=build-$CIRCLE_BUILD_NUM
            NAME=testrun
            /bin/bash ./run-test-container.sh $IMAGE $NAMESPACE $NAME

      - run:
          name: Uninstall / Cleanup
          # Make sure to always run this, particularly if the test fails,
          # to avoid clogging our cluster.
          when: always
          command: |
            ./kubectl delete namespaces build-$CIRCLE_BUILD_NUM

      - store_artifacts:
          path: target/
      
      - store_artifacts:
          path: .build/